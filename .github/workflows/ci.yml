name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          docker.io \
          docker-compose \
          libssl-dev \
          pkg-config
          
    - name: Start Docker
      run: |
        sudo systemctl start docker
        sudo usermod -a -G docker $USER
        
    - name: Build Rust components
      run: |
        cargo build --manifest-path rust/packet-scheduler/Cargo.toml
        cargo build --manifest-path rust/underlay-manager/Cargo.toml
        
    - name: Test Rust components
      run: |
        cargo test --manifest-path rust/packet-scheduler/Cargo.toml
        cargo test --manifest-path rust/underlay-manager/Cargo.toml
        
    - name: Build C++ components
      run: |
        make -C cpp/fec-engine
        make -C cpp/reassembly-engine
        
    - name: Build Go components
      run: |
        go build -o bin/controller ./cmd/controller
        
    - name: Test Go components
      run: |
        go test ./...
        
    - name: Build Docker images
      run: |
        docker-compose build
        
    - name: Run integration tests
      run: |
        # Start services for testing
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run basic connectivity tests
        curl -f http://localhost:8080/api/health || exit 1
        curl -f http://localhost:9090/metrics || exit 1
        
        # Cleanup
        docker-compose down
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          bin/
          rust/packet-scheduler/target/release/
          rust/underlay-manager/target/release/
          cpp/fec-engine/fec_engine
          cpp/reassembly-engine/reassembly_engine
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python linting tools
      run: |
        pip install black isort flake8 mypy
        
    - name: Lint Rust code
      run: |
        cargo clippy --manifest-path rust/packet-scheduler/Cargo.toml
        cargo clippy --manifest-path rust/underlay-manager/Cargo.toml
        
    - name: Format Rust code
      run: |
        cargo fmt --manifest-path rust/packet-scheduler/Cargo.toml -- --check
        cargo fmt --manifest-path rust/underlay-manager/Cargo.toml -- --check
        
    - name: Lint Go code
      run: |
        go fmt ./...
        go vet ./...
        
    - name: Lint Python code
      run: |
        black --check python/
        isort --check-only python/
        flake8 python/
        mypy python/
        
    - name: Security scan
      run: |
        # Rust security audit
        cargo audit --manifest-path rust/packet-scheduler/Cargo.toml
        cargo audit --manifest-path rust/underlay-manager/Cargo.toml
        
        # Go security scan (if gosec is available)
        # gosec ./...
        
        # Python security scan
        pip install bandit
        bandit -r python/

  build-packages:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          docker.io \
          docker-compose \
          libssl-dev \
          pkg-config
          
    - name: Start Docker
      run: |
        sudo systemctl start docker
        sudo usermod -a -G docker $USER
        
    - name: Build packages
      run: |
        VERSION=dev ./scripts/build-release.sh
        
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/
        retention-days: 30 