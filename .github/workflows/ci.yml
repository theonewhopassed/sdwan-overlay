name: SD-WAN CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.19'
    
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libssl-dev \
          libpcap-dev \
          libnetfilter-queue-dev \
          golang-go \
          python3-pip
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install black isort flake8 mypy pytest pytest-asyncio
    
    - name: Install Go tools
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    
    - name: Format check (Rust)
      run: |
        cd rust/packet-scheduler && cargo fmt -- --check
        cd ../underlay-manager && cargo fmt -- --check
    
    - name: Format check (Go)
      run: |
        go fmt ./...
    
    - name: Format check (Python)
      run: |
        black --check python/
        isort --check-only python/
    
    - name: Lint (Rust)
      run: |
        cd rust/packet-scheduler && cargo clippy -- -D warnings
        cd ../underlay-manager && cargo clippy -- -D warnings
    
    - name: Lint (Go)
      run: |
        golangci-lint run
    
    - name: Lint (Python)
      run: |
        flake8 python/
        mypy python/
    
    - name: Security scan (Rust)
      run: |
        cd rust/packet-scheduler && cargo audit
        cd ../underlay-manager && cargo audit
    
    - name: Security scan (Go)
      run: |
        gosec ./...
    
    - name: Security scan (Python)
      run: |
        pip install bandit
        bandit -r python/
    
    - name: Test (Rust)
      run: |
        cd rust/packet-scheduler && cargo test
        cd ../underlay-manager && cargo test
    
    - name: Test (Go)
      run: |
        go test -v ./...
    
    - name: Test (Python)
      run: |
        cd python/device-agent
        pip install -e .
        pytest tests/
    
    - name: Build (Rust)
      run: |
        cd rust/packet-scheduler && cargo build --release
        cd ../underlay-manager && cargo build --release
    
    - name: Build (C++)
      run: |
        cd cpp/fec-engine && make clean && make
        cd ../reassembly-engine && make clean && make
    
    - name: Build (Go)
      run: |
        go build -o bin/controller ./cmd/controller
        go build -o bin/device-agent ./cmd/device-agent
    
    - name: Build (Python)
      run: |
        cd python/device-agent
        pip install -e .
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Integration tests
      run: |
        ./scripts/test-integration.sh
    
    - name: Performance tests
      run: |
        ./scripts/test-performance.sh

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker-compose build
        docker-compose push

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment logic here
    
    - name: Run smoke tests
      run: |
        ./scripts/test-smoke.sh
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here 